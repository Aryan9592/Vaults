{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "95995691607194fc64a47e325a114b8f2c9d51aa4997a6c68715fe60209d073b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "38459b349d9062080e019c39e32dc290ca9384b32ae75a36dff7ba482ea7f39a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "2d420e24b825682ea24387a485e21b1880894679e7fa4b4450ec84d081ee5b3e",
          "withoutMetadata": "ba44a4a7d262aca83529fad987bca0f4fb803c81286fdf8e55d1725ec6c67c07",
          "linkedWithoutMetadata": "ba44a4a7d262aca83529fad987bca0f4fb803c81286fdf8e55d1725ec6c67c07"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "090738facc2eeccd33ed7843da832251a042c5a3d18bbb73f13c67c25031e4f8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "cda6bef9b90e2359e9512c95169ceb38a43dc195a297dde3df990ea1470a9dc8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/BaseVaultProxy.sol:BaseVaultProxy": {
        "src": "contracts/BaseVaultProxy.sol:7",
        "version": {
          "withMetadata": "e390e65f5413e2d6e627818c146ccc4e1e5efa8efeef979b95a2c5e2e1c7f854",
          "withoutMetadata": "9830b74c77bdd44ea0973da663505039baec77fddb215ea6528e75cd598fa0b9",
          "linkedWithoutMetadata": "9830b74c77bdd44ea0973da663505039baec77fddb215ea6528e75cd598fa0b9"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "BaseVaultProxy",
              "src": "contracts/BaseVaultProxy.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/LocusRouter.sol:LocusRouter": {
        "src": "contracts/LocusRouter.sol:4",
        "version": {
          "withMetadata": "d4cdff11af1dcf55c6530c774f92ba48f398098e6d8e8d213bb006f2ab8534d4",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IBaseVault.sol:IBaseVault": {
        "src": "contracts/interfaces/IBaseVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/ILocusRouter.sol:ILocusRouter": {
        "src": "contracts/interfaces/ILocusRouter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mock/TestStrategy.sol:TestStrategy": {
        "src": "contracts/mock/TestStrategy.sol:15",
        "version": {
          "withMetadata": "ae1a730f98913d3e372a3d1ac7ea2fb101afd771eeca57fee1ed0c3fe3685fa1",
          "withoutMetadata": "361183b69f4e2431e54b8cafa9b3c8b45d676a4f72dfed8e8995aea13cb6de04",
          "linkedWithoutMetadata": "361183b69f4e2431e54b8cafa9b3c8b45d676a4f72dfed8e8995aea13cb6de04"
        },
        "inherit": [
          "lib/yearn-vaults/contracts/BaseStrategy.sol:BaseStrategyInitializable",
          "lib/yearn-vaults/contracts/BaseStrategy.sol:BaseStrategy"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address)",
          "name()",
          "_toggleDelegation()",
          "delegatedAssets()",
          "_takeFunds(uint256)",
          "_toggleReentrancyExploit()",
          "_setWant(address)",
          "ethToWant(uint256)",
          "estimatedTotalAssets()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestStrategy",
            "src": "contracts/mock/TestStrategy.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "metadataURI",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:194"
            },
            {
              "label": "doHealthCheck",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:197"
            },
            {
              "label": "healthCheck",
              "offset": 1,
              "slot": "1",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:198"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(VaultAPI)3235",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:240"
            },
            {
              "label": "strategist",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:241"
            },
            {
              "label": "rewards",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:242"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:243"
            },
            {
              "label": "want",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)1876",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:245"
            },
            {
              "label": "minReportDelay",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:275"
            },
            {
              "label": "maxReportDelay",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:279"
            },
            {
              "label": "emergencyExit",
              "offset": 0,
              "slot": "9",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:282"
            },
            {
              "label": "baseFeeOracle",
              "offset": 1,
              "slot": "9",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:285"
            },
            {
              "label": "creditThreshold",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:288"
            },
            {
              "label": "forceHarvestTriggerOnce",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:291"
            },
            {
              "label": "isOriginal",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseStrategyInitializable",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:954"
            },
            {
              "label": "doReentrancy",
              "offset": 2,
              "slot": "11",
              "type": "t_bool",
              "contract": "TestStrategy",
              "src": "contracts/mock/TestStrategy.sol:16"
            },
            {
              "label": "delegateEverything",
              "offset": 3,
              "slot": "11",
              "type": "t_bool",
              "contract": "TestStrategy",
              "src": "contracts/mock/TestStrategy.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1876": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(VaultAPI)3235": {
              "label": "contract VaultAPI",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/mock/Token.sol:Token": {
        "src": "contracts/mock/Token.sol:5",
        "version": {
          "withMetadata": "686ae69300230764c8582f0c422c38ee76dab8418a539942ca67a096ff2e32d1",
          "withoutMetadata": "9b1d971b1e582ae71bdee0f34ec2be1414e2a66f4d3bc3533a890dee2231fe12",
          "linkedWithoutMetadata": "9b1d971b1e582ae71bdee0f34ec2be1414e2a66f4d3bc3533a890dee2231fe12"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/mock/Token.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "lib/yearn-vaults/contracts/BaseStrategy.sol:BaseStrategy": {
        "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:192",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "apiVersion()",
          "name()",
          "delegatedAssets()",
          "setHealthCheck(address)",
          "setDoHealthCheck(bool)",
          "setStrategist(address)",
          "setKeeper(address)",
          "setRewards(address)",
          "setMinReportDelay(uint256)",
          "setMaxReportDelay(uint256)",
          "setCreditThreshold(uint256)",
          "setForceHarvestTriggerOnce(bool)",
          "setBaseFeeOracle(address)",
          "setMetadataURI(string)",
          "ethToWant(uint256)",
          "estimatedTotalAssets()",
          "isActive()",
          "tendTrigger(uint256)",
          "tend()",
          "harvestTrigger(uint256)",
          "isBaseFeeAcceptable()",
          "harvest()",
          "withdraw(uint256)",
          "migrate(address)",
          "setEmergencyExit()",
          "sweep(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:363"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "metadataURI",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:194"
            },
            {
              "label": "doHealthCheck",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:197"
            },
            {
              "label": "healthCheck",
              "offset": 1,
              "slot": "1",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:198"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(VaultAPI)3235",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:240"
            },
            {
              "label": "strategist",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:241"
            },
            {
              "label": "rewards",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:242"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:243"
            },
            {
              "label": "want",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)1876",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:245"
            },
            {
              "label": "minReportDelay",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:275"
            },
            {
              "label": "maxReportDelay",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:279"
            },
            {
              "label": "emergencyExit",
              "offset": 0,
              "slot": "9",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:282"
            },
            {
              "label": "baseFeeOracle",
              "offset": 1,
              "slot": "9",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:285"
            },
            {
              "label": "creditThreshold",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:288"
            },
            {
              "label": "forceHarvestTriggerOnce",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:291"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1876": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(VaultAPI)3235": {
              "label": "contract VaultAPI",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "lib/yearn-vaults/contracts/BaseStrategy.sol:BaseStrategyInitializable": {
        "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:953",
        "inherit": [
          "lib/yearn-vaults/contracts/BaseStrategy.sol:BaseStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "clone(address)",
          "clone(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategyInitializable",
            "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:957"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isOriginal",
            "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:954"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "metadataURI",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:194"
            },
            {
              "label": "doHealthCheck",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:197"
            },
            {
              "label": "healthCheck",
              "offset": 1,
              "slot": "1",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:198"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(VaultAPI)3235",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:240"
            },
            {
              "label": "strategist",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:241"
            },
            {
              "label": "rewards",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:242"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:243"
            },
            {
              "label": "want",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)1876",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:245"
            },
            {
              "label": "minReportDelay",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:275"
            },
            {
              "label": "maxReportDelay",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:279"
            },
            {
              "label": "emergencyExit",
              "offset": 0,
              "slot": "9",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:282"
            },
            {
              "label": "baseFeeOracle",
              "offset": 1,
              "slot": "9",
              "type": "t_address",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:285"
            },
            {
              "label": "creditThreshold",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:288"
            },
            {
              "label": "forceHarvestTriggerOnce",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:291"
            },
            {
              "label": "isOriginal",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseStrategyInitializable",
              "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:954"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1876": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(VaultAPI)3235": {
              "label": "contract VaultAPI",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "lib/yearn-vaults/contracts/BaseStrategy.sol:HealthCheck": {
        "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:161",
        "inherit": [],
        "libraries": [],
        "methods": [
          "check(uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "lib/yearn-vaults/contracts/BaseStrategy.sol:IBaseFee": {
        "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:171",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isCurrentBaseFeeAcceptable()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "lib/yearn-vaults/contracts/BaseStrategy.sol:StrategyAPI": {
        "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:133",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "vault()",
          "want()",
          "apiVersion()",
          "keeper()",
          "isActive()",
          "delegatedAssets()",
          "estimatedTotalAssets()",
          "tendTrigger(uint256)",
          "tend()",
          "harvestTrigger(uint256)",
          "harvest()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "lib/yearn-vaults/contracts/BaseStrategy.sol:VaultAPI": {
        "src": "lib/yearn-vaults/contracts/BaseStrategy.sol:20",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "apiVersion()",
          "permit(address,address,uint256,uint256,bytes)",
          "deposit()",
          "deposit(uint256)",
          "deposit(uint256,address)",
          "withdraw()",
          "withdraw(uint256)",
          "withdraw(uint256,address)",
          "token()",
          "strategies(address)",
          "pricePerShare()",
          "totalAssets()",
          "depositLimit()",
          "maxAvailableShares()",
          "creditAvailable()",
          "debtOutstanding()",
          "expectedReturn()",
          "report(uint256,uint256,uint256)",
          "revokeStrategy()",
          "governance()",
          "management()",
          "guardian()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      }
    }
  ]
}